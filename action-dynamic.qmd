# Dynamic UI

## Updating inputs

```{.python filename='examples/action-dynamic/slider-min-max/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_numeric("min", "Minimum", 0),
    ui.input_numeric("max", "Maximum", 3),
    ui.input_slider("n", "n", min=0, max=3, value=1),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.min)
    def _():
        ui.update_slider("n", min=input.min())
    
    @reactive.effect
    @reactive.event(input.max)
    def _():
        ui.update_slider("n", max=input.max())

app = App(app_ui, server)
```

### Simple uses

```{.python filename='examples/action-dynamic/reset/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_slider("x1", "x1", min=-10, max=10, value=0),
    ui.input_slider("x2", "x2", min=-10, max=10, value=0),
    ui.input_slider("x3", "x3", min=-10, max=10, value=0),
    ui.input_action_button("reset", "Reset"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.reset)
    def _():
        ui.update_slider("x1", value=0)
        ui.update_slider("x2", value=0)
        ui.update_slider("x3", value=0)

app = App(app_ui, server)
```


```{.python filename='examples/action-dynamic/action-button-label/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_numeric("n", "Simulations", 10),
    ui.input_action_button("simulate", "Simulate"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.n)
    def _():
        label = f"Simulate {input.n()} times"
        ui.update_action_button("simulate", label=label)

app = App(app_ui, server)
```

### Hierarchical select boxes

```{.python filename='examples/action-dynamic/hierarchical-select-box/app.py'}
from shiny import App, ui, reactive, req, render
import pandas as pd

sales = pd.read_csv("sales-dashboard/sales_data_sample.csv",
                    sep=",", encoding="Latin-1", 
                    na_values=["", "NaN"], keep_default_na=False)

app_ui = ui.page_fluid(
    ui.input_select("territory", "Territory", choices=sales['TERRITORY'].unique().tolist()),
    ui.input_select("customername", "Customer", choices=list()),
    ui.input_select("ordernumber", "Order number", choices=list()),
    ui.output_table("data"),
)

def server(input, output, session):
    @reactive.calc
    def territory():
        return sales[sales['TERRITORY']==input.territory()]
    
    @reactive.effect
    @reactive.event(territory)
    def _():
        choices = territory()['CUSTOMERNAME'].unique().tolist()
        ui.update_select("customername", choices=choices)

    @reactive.calc
    def customer():
        req(input.customername())
        return territory()[territory()['CUSTOMERNAME']==input.customername()]
    
    @reactive.effect
    @reactive.event(customer)
    def _():
        choices = customer()['ORDERNUMBER'].unique().tolist()
        ui.update_select("ordernumber", choices=choices)
    
    @render.table
    def data():
        req(input.ordernumber())
        res = customer()[customer()['ORDERNUMBER']==int(input.ordernumber())]\
            [['QUANTITYORDERED', 'PRICEEACH', 'PRODUCTCODE']]
        
        return res

app = App(app_ui, server)
```

:::{.callout-note}
Please note that `choices=list()` was used in `ui.input_select()` when creating empty drop-down list for select input control. `choices=None` does not work, because a value of `choices` must be list, tuple, or dictionary.
:::

:::{.callout-note}
Please note that `input.ordernumber()` returns string, even though underlying data variable `ORDERNUMBER` is integer. To compare `input.ordernumber()` with the underlying data variable, I did typecasting `int(input.ordernumber())`.
:::


### Freezing reactive inputs

```{.python filename='examples/action-dynamic/freezing-reactive-input/app.py'}
from shiny import App, ui, reactive, render, req
from pydataset import data

app_ui = ui.page_fluid(
    ui.input_select("dataset", "Choose a dataset", choices=("pressure", "cars")),
    ui.input_select("column", "Choose column", choices=tuple()),
    ui.output_text_verbatim("summary"),
)

def server(input, output, session):
    @reactive.calc
    def dataset():
        return data(input.dataset())
    
    @reactive.effect
    @reactive.event(input.dataset)
    def _():
        reactive.value.freeze(input.column)
        ui.update_select("column", choices=dataset().columns.tolist())
    
    @render.text
    def summary():
        return dataset()[input.column()].describe()

app = App(app_ui, server)
```

:::{.callout-note}
Please note that the argument of `reactive.value.freeze()` is `input.column`, not `input.column()`.
:::



