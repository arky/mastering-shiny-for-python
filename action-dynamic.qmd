# Dynamic UI

## Updating inputs

```{.python filename='examples/action-dynamic/slider-min-max/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_numeric("min", "Minimum", 0),
    ui.input_numeric("max", "Maximum", 3),
    ui.input_slider("n", "n", min=0, max=3, value=1),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.min)
    def _():
        ui.update_slider("n", min=input.min())
    
    @reactive.effect
    @reactive.event(input.max)
    def _():
        ui.update_slider("n", max=input.max())

app = App(app_ui, server)
```

### Simple uses

```{.python filename='examples/action-dynamic/reset/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_slider("x1", "x1", min=-10, max=10, value=0),
    ui.input_slider("x2", "x2", min=-10, max=10, value=0),
    ui.input_slider("x3", "x3", min=-10, max=10, value=0),
    ui.input_action_button("reset", "Reset"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.reset)
    def _():
        ui.update_slider("x1", value=0)
        ui.update_slider("x2", value=0)
        ui.update_slider("x3", value=0)

app = App(app_ui, server)
```


```{.python filename='examples/action-dynamic/action-button-label/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_numeric("n", "Simulations", 10),
    ui.input_action_button("simulate", "Simulate"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.n)
    def _():
        label = f"Simulate {input.n()} times"
        ui.update_action_button("simulate", label=label)

app = App(app_ui, server)
```

### Hierarchical select boxes

```{.python filename='examples/action-dynamic/hierarchical-select-box/app.py'}
from shiny import App, ui, reactive, req, render
import pandas as pd

sales = pd.read_csv("sales-dashboard/sales_data_sample.csv",
                    sep=",", encoding="Latin-1", 
                    na_values=["", "NaN"], keep_default_na=False)

app_ui = ui.page_fluid(
    ui.input_select("territory", "Territory", choices=sales['TERRITORY'].unique().tolist()),
    ui.input_select("customername", "Customer", choices=list()),
    ui.input_select("ordernumber", "Order number", choices=list()),
    ui.output_table("data"),
)

def server(input, output, session):
    @reactive.calc
    def territory():
        return sales[sales['TERRITORY']==input.territory()]
    
    @reactive.effect
    @reactive.event(territory)
    def _():
        choices = territory()['CUSTOMERNAME'].unique().tolist()
        ui.update_select("customername", choices=choices)

    @reactive.calc
    def customer():
        req(input.customername())
        return territory()[territory()['CUSTOMERNAME']==input.customername()]
    
    @reactive.effect
    @reactive.event(customer)
    def _():
        choices = customer()['ORDERNUMBER'].unique().tolist()
        ui.update_select("ordernumber", choices=choices)
    
    @render.table
    def data():
        req(input.ordernumber())
        res = customer()[customer()['ORDERNUMBER']==int(input.ordernumber())]\
            [['QUANTITYORDERED', 'PRICEEACH', 'PRODUCTCODE']]
        
        return res

app = App(app_ui, server)
```

:::{.callout-note}
Please note that `choices=list()` was used in `ui.input_select()` when creating empty drop-down list for select input control. `choices=None` does not work, because a value of `choices` must be list, tuple, or dictionary.
:::

:::{.callout-note}
Please note that `input.ordernumber()` returns string, even though underlying data variable `ORDERNUMBER` is integer. To compare `input.ordernumber()` with the underlying data variable, I did typecasting `int(input.ordernumber())`.
:::


### Freezing reactive inputs

```{.python filename='examples/action-dynamic/freezing-reactive-input/app.py'}
from shiny import App, ui, reactive, render, req
from pydataset import data

app_ui = ui.page_fluid(
    ui.input_select("dataset", "Choose a dataset", choices=("pressure", "cars")),
    ui.input_select("column", "Choose column", choices=tuple()),
    ui.output_text_verbatim("summary"),
)

def server(input, output, session):
    @reactive.calc
    def dataset():
        return data(input.dataset())
    
    @reactive.effect
    @reactive.event(input.dataset)
    def _():
        reactive.value.freeze(input.column)
        ui.update_select("column", choices=dataset().columns.tolist())
    
    @render.text
    def summary():
        return dataset()[input.column()].describe()

app = App(app_ui, server)
```

:::{.callout-note}
Please note that the argument of `reactive.value.freeze()` is `input.column`, not `input.column()`.
:::


### Exercise

1. Let date input allow a user to select only dates in the selected year.

```{.python filename='solutions/action-dynamic/updating-inputs/update-year/app.py'}
from shiny import App, ui, reactive
import datetime

app_ui = ui.page_fluid(
    ui.input_numeric("year", "year", value=2020),
    ui.input_date("date", "date", value=datetime.date(2020, 1, 1)),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.year)
    def _():
        d = datetime.date(
            input.year(),
            input.date().month,
            28 if input.date().month == 2 and input.date().day == 29 else input.date().day
        )
        ui.update_date("date", 
                       value=d,
                       min=datetime.date(input.year(), 1, 1),
                       max=datetime.date(input.year(), 12, 31))

app = App(app_ui, server)
```

2. Hierarchical select boxes for state and county

```{.python filename='solutions/action-dynamic/updating-inputs/update-county/app.py'}
# Please download county.csv from https://www.openintro.org/data/
# and store it to data/ folder
# before running this app

from shiny import App, ui, reactive
import pandas as pd

df = pd.read_csv("data/county.csv")
states = df['state'].unique().tolist()

app_ui = ui.page_fluid(
    ui.input_select("state", "State", choices=states),
    ui.input_select("county", "County", choices=list()),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.state)
    def _():
        county_label = "County"
        if input.state()=="Louisiana":
            county_label = "Parish"
        elif input.state()=="Alaska":
            county_label = "Borough"

        counties = df[df['state']==input.state()]['name'].to_list()
        ui.update_select("county", label=county_label, choices=counties)


app = App(app_ui, server)
```

3 & 4.


```{.python filename='solutions/action-dynamic/updating-inputs/gapminder/app.py'}
from shiny import App, ui, reactive, render
from gapminder import gapminder

continents = gapminder['continent'].unique().tolist()

app_ui = ui.page_fluid(
    ui.input_select("continent", "Continent", choices=["(All)"] + continents),
    ui.input_select("country", "Country", choices=list()),
    ui.output_table("data"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.continent)
    def _():
        if input.continent() == "(All)":
            countries = gapminder['country'].unique().tolist()
        else:
            countries = gapminder[gapminder['continent']==input.continent()]['country'].unique().tolist()
        ui.update_select("country", choices=countries)

    @reactive.calc
    def country():
        return gapminder[gapminder['country']==input.country()]
    
    @render.table
    def data():
        return country()

app = App(app_ui, server)
```

## Dynamic visibility


```{.python filename='examples/action-dynamic/navset/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_select("controller", "Show", choices=[f"panel{x}" for x in range(1, 4)])
        ),
        ui.navset_hidden(
            ui.nav_panel("panel1", "Panel 1 content"),
            ui.nav_panel("panel2", "Panel 2 content"),
            ui.nav_panel("panel3", "Panel 3 content"),
            id="switcher",
        )
    )
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.controller)
    def _():
        ui.update_navs("switcher", selected=input.controller())

app = App(app_ui, server)
```

### Conditional UI

```{.python filename='examples/action-dynamic/conditional-ui/app.py'}
from shiny import App, ui, reactive, render
import numpy as np
import matplotlib.pyplot as plt

parameter_tabs = ui.navset_hidden(
    ui.nav_panel("normal",
                 ui.input_numeric("mean", "mean", value=1),
                 ui.input_numeric("sd", "standard deviation", min=0, value=1),
    ),
    ui.nav_panel("uniform",
                 ui.input_numeric("min", "min", value=0),
                 ui.input_numeric("max", "max", value=1),
    ),
    ui.nav_panel("exponential",
                 ui.input_numeric("rate", "rate", value=1, min=0)
    ),
    id="params"
)

app_ui = ui.page_fluid(
    ui.layout_sidebar(
        ui.sidebar(
            ui.input_select("dist", "Distribution", 
                            choices=["normal", "uniform", "exponential"]
            ),
            ui.input_numeric("n", "Number of samples", value=100),
            parameter_tabs,
        ),
        ui.output_plot("hist"),
    )
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.dist)
    def _():
        ui.update_navs("params", selected=input.dist())
    
    @reactive.calc
    def sample():
        match input.dist():
            case "normal":
                res = np.random.normal(input.mean(), input.sd(), input.n())
            case "uniform":
                res = np.random.uniform(input.min(), input.max(), input.n())
            case "exponential":
                res = np.random.exponential(1 / input.rate(), input.n())
            case _:
                res = None
        
        return res
    
    @render.plot
    def hist():
        plt.hist(sample())

app = App(app_ui, server)
```

### Wizard interface


```{.python filename='examples/action-dynamic/wizard-interface/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.navset_hidden(
        ui.nav_panel("page_1",
                     "Welcome!",
                     ui.input_action_button("page_12", "next")
        ),
        ui.nav_panel("page_2",
                     "Only one page to go",
                     ui.input_action_button("page_21", "prev"),
                     ui.input_action_button("page_23", "next")
        ),
        ui.nav_panel("page_3",
                     "You're done!",
                     ui.input_action_button("page_32", "prev")
        ),
        id="wizard"
    )
)

def server(input, output, session):
    def switch_page(i):
        ui.update_navs("wizard", selected=f"page_{i}")
    
    @reactive.effect
    @reactive.event(input.page_12)
    def _():
        switch_page(2)

    @reactive.effect
    @reactive.event(input.page_21)
    def _():
        switch_page(1)

    @reactive.effect
    @reactive.event(input.page_23)
    def _():
        switch_page(3)

    @reactive.effect
    @reactive.event(input.page_32)
    def _():
        switch_page(2)

app = App(app_ui, server)
```

### Exercises

1. Show additional control only if the user checks an "advanced" checkbox.


```{.python filename='solutions/action-dynamic/dynamic-visibility/checkbox-for-control/app.py'}
from shiny import App, ui, reactive

app_ui = ui.page_fluid(
    ui.input_checkbox("advanced", "Advanced"),
    ui.navset_hidden(
        ui.nav_panel("empty"),
        ui.nav_panel("additional",
                     ui.input_numeric("number", "Additional control", 
                                      value=1, min=0, max=10)
        ),
        id="wizard"
    )
)

def server(input, output, session):
    @reactive.effect
    def _():
        ui.update_navs("wizard", 
                       selected="additional" if input.advanced() else "empty")


app = App(app_ui, server)
```

2. Allow the user to choose which geom to use.

```{.python filename='solutions/action-dynamic/diamonds/app.py'}
from shiny import App, ui, reactive, render
from pydataset import data
from plotnine import ggplot, aes, geom_histogram, geom_freqpoly, geom_density

diamonds = data("diamonds")

app_ui = ui.page_fluid(
    ui.input_select("geom", "geom function",
        choices=["geom_histogram", "geom_freqpoly", "geom_density"]
    ),
    ui.navset_hidden(
        ui.nav_panel("param1",
            ui.input_numeric("binwidth", "binwidth", value=0.1, step=0.1),
        ),
        ui.nav_panel("param2",
            ui.input_select("bw", "bw", 
                choices=["nrd0", "normal_reference", "scott", "silverman"],
                selected="nrd0"
            ),
        ),
        id="params",
    ),
    ui.output_plot("plot"),
)

def server(input, output, session):
    @reactive.effect
    @reactive.event(input.geom)
    def _():
        match input.geom():
            case "geom_histogram":
                panel = "param1"
            case "geom_freqpoly":
                panel = "param1"
            case "geom_density":
                panel = "param2"

        ui.update_navs("params", selected=panel)

    @render.plot
    def plot():
        plot = ggplot(diamonds, aes('carat'))
        if input.geom() == "geom_histogram":
            res = plot + geom_histogram(binwidth=input.binwidth())
        elif input.geom() == "geom_freqpoly":
            res = plot + geom_freqpoly(binwidth=input.binwidth())
        elif input.geom() == "geom_density":
            res = plot + geom_density(bw=input.bw())

        return res

app = App(app_ui, server)
```


3. 
