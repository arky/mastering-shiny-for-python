# Unloads and downloads

## Upload

### Server

```{.python filename='action-transfer/upload-multiple/app.py'}
from shiny import App, ui, render
import pandas as pd

app_ui = ui.page_fluid(
    ui.input_file("upload", None, button_label="Upload...", multiple=True),
    ui.output_table("files"),
)

def server(input, output, session):
    @render.table
    def files():
        return pd.DataFrame(input.upload())

app = App(app_ui, server)
```

### Uploading data


```{.python filename='action-transfer/uploading-data/app.py'}
from shiny import App, ui, render, reactive, req
import os
import pandas as pd

app_ui = ui.page_fluid(
    ui.input_file("file", None, accept=[".csv", ".tsv"]),
    ui.input_numeric("n", "Rows", value=5, min=1, step=1),
    ui.output_ui("out_container"),
)

def server(input, output, session):
    @reactive.calc
    def data():
        req(input.file())

        _, ext = os.path.splitext(input.file()[0]["name"])

        match ext:
            case ".csv":
                return pd.read_csv(input.file()[0]["datapath"])
            case ".tsv":
                return pd.read_csv(input.file()[0]["datapath"], delimiter="\t")
            case _:
                return None
    
    @render.ui
    def out_container():
        if isinstance(data(), pd.DataFrame):
            return ui.output_table("head")
        else:
            return ui.markdown("**Invalid file; Please upload a .csv or .tsv file**")
        
    @render.table
    def head():
        req(isinstance(data(), pd.DataFrame))
        return data().head(input.n())
                
app = App(app_ui, server)
```

## Download

### Downloading data

```{.python filename='examples/action-transfer/downloading-data/app.py'}
from shiny import App, ui, render, reactive, req
import pandas as pd
from pydataset import data

datasets = list(data()["dataset_id"])

app_ui = ui.page_fluid(
    ui.input_select("dataset", "Pick a dataset", datasets),
    ui.output_table("preview"),
    ui.download_button("download_tsv", "Download .tsv"),
)

def server(input, output, session):
    @reactive.calc
    def df():
        return data(input.dataset())
    
    @render.table
    def preview():
        req(isinstance(df(), pd.DataFrame))
        return df().head()
    
    @session.download(filename='test.tsv')
    def download_tsv():
        yield df().to_csv(None, sep="\t", index=False)


app = App(app_ui, server)
```

::: {.callout-caution}
I could not find a way to set download filename to be in reactive context. When I replaced `'test.csv'` with `f"{input.data()}.tsv"`, it throws the following error message:

```
_send_error_response: No current reactive context
```
:::


### Downloading reports

Let us render quarto document (.qmd) to html format.

````{.python filename='report.qmd'}
---
title: "My Document"
format:
    html:
        embed-resources: true
jupyter: python3
---

```{python}
#| tags: [parameters]

n = 10
```


```{python}
import numpy as np
from matplotlib import pyplot as plt

plt.scatter(np.random.normal(size=n), np.random.normal(size=n))
```
````


```{.python filename='examples/action-transfer/downloading-report/app.py'}
from shiny import App, ui
import subprocess
import tempfile
import shutil

app_ui = ui.page_fluid(
    ui.input_slider("n", "Number of points", 1, 100, 50),
    ui.download_button("report", "Generate report"),
)

def server(input, output, session):
    @session.download(filename="report.html")
    def report():
        id = ui.notification_show(
            "Rendering report...",
            duration=None,
            close_button=False
        )

        with tempfile.TemporaryDirectory() as tmpdirname:
            source_file = '/'.join([tmpdirname, "report.qmd"])
            shutil.copy("report.qmd", source_file)
            subprocess.run([
                'quarto', 'render', source_file,
                '-P', f"n:{input.n()}"
            ])

            output_file = '/'.join([tmpdirname, "report.html"])
            html_file = open(output_file, 'r')
            html_docs = html_file.read()

        yield html_docs


app = App(app_ui, server)
```

::: {.callout-important}
Please note that I copied *report.qmd* file to temporary directory and rendered document within the temporary directory. If I render *.qmd* directly within app directory, the app will be automatcially reloaded when it runs with `--reload` option. VS Code extension for Shiny for Python runs the app with `--reload` option. You can avoid automatic reload by running the app in terminal with `shiny run --launch-browser app.py`. However, it would still be good to consider using temporary directory when it is applicable.
:::

