# Unloads and downloads

## Upload

### Server

```{.python filename='action-transfer/upload-multiple/app.py'}
from shiny import App, ui, render
import pandas as pd

app_ui = ui.page_fluid(
    ui.input_file("upload", None, button_label="Upload...", multiple=True),
    ui.output_table("files"),
)

def server(input, output, session):
    @render.table
    def files():
        return pd.DataFrame(input.upload())

app = App(app_ui, server)
```

### Uploading data


```{.python filename='action-transfer/uploading-data/app.py'}
from shiny import App, ui, render, reactive, req
import os
import pandas as pd

app_ui = ui.page_fluid(
    ui.input_file("file", None, accept=[".csv", ".tsv"]),
    ui.input_numeric("n", "Rows", value=5, min=1, step=1),
    ui.output_ui("out_container"),
)

def server(input, output, session):
    @reactive.calc
    def data():
        req(input.file())

        _, ext = os.path.splitext(input.file()[0]["name"])

        match ext:
            case ".csv":
                return pd.read_csv(input.file()[0]["datapath"])
            case ".tsv":
                return pd.read_csv(input.file()[0]["datapath"], delimiter="\t")
            case _:
                return None
    
    @render.ui
    def out_container():
        if isinstance(data(), pd.DataFrame):
            return ui.output_table("head")
        else:
            return ui.markdown("**Invalid file; Please upload a .csv or .tsv file**")
        
    @render.table
    def head():
        req(isinstance(data(), pd.DataFrame))
        return data().head(input.n())
                
app = App(app_ui, server)
```

## Download

### Downloading data

```{.python filename='examples/action-transfer/downloading-data/app.py'}
from shiny import App, ui, render, reactive, req
import pandas as pd
from pydataset import data

datasets = list(data()["dataset_id"])

app_ui = ui.page_fluid(
    ui.input_select("dataset", "Pick a dataset", datasets),
    ui.output_table("preview"),
    ui.download_button("download_tsv", "Download .tsv"),
)

def server(input, output, session):
    @reactive.calc
    def df():
        return data(input.dataset())
    
    @render.table
    def preview():
        req(isinstance(df(), pd.DataFrame))
        return df().head()
    
    @session.download(filename='test.tsv')
    def download_tsv():
        yield df().to_csv(None, sep="\t", index=False)


app = App(app_ui, server)
```

::: {.callout-caution}
I could not find a way to set download filename to be in reactive context. When I replaced `'test.csv'` with `f"{input.data()}.tsv"`, it throws the following error message:

```
_send_error_response: No current reactive context
```
:::
